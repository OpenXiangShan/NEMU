// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/inst.proto

#include "inst_trace/inst.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2finst_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2finst_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Inst_MemAccess;
}  // namespace protobuf_proto_2finst_2eproto
namespace ProtoMessage {
class InstHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstHeader>
      _instance;
} _InstHeader_default_instance_;
class Inst_MemAccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Inst_MemAccess>
      _instance;
} _Inst_MemAccess_default_instance_;
class InstDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Inst>
      _instance;
} _Inst_default_instance_;
}  // namespace ProtoMessage
namespace protobuf_proto_2finst_2eproto {
static void InitDefaultsInstHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_InstHeader_default_instance_;
    new (ptr) ::ProtoMessage::InstHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::InstHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InstHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInstHeader}, {}};

static void InitDefaultsInst_MemAccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_Inst_MemAccess_default_instance_;
    new (ptr) ::ProtoMessage::Inst_MemAccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::Inst_MemAccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Inst_MemAccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInst_MemAccess}, {}};

static void InitDefaultsInst() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_Inst_default_instance_;
    new (ptr) ::ProtoMessage::Inst();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::Inst::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Inst =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInst}, {
      &protobuf_proto_2finst_2eproto::scc_info_Inst_MemAccess.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_InstHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Inst_MemAccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Inst.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::InstHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::InstHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::InstHeader, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::InstHeader, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::InstHeader, tick_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::InstHeader, has_mem_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, mem_flags_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, pc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, inst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, inst_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, cpuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, inst_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtoMessage::Inst, mem_access_),
  1,
  2,
  0,
  3,
  5,
  4,
  6,
  7,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ProtoMessage::InstHeader)},
  { 13, 21, sizeof(::ProtoMessage::Inst_MemAccess)},
  { 24, 38, sizeof(::ProtoMessage::Inst)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoMessage::_InstHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoMessage::_Inst_MemAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoMessage::_Inst_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/inst.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020proto/inst.proto\022\014ProtoMessage\"P\n\nInst"
      "Header\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \002(\r:\0010\022\021"
      "\n\ttick_freq\030\003 \002(\004\022\017\n\007has_mem\030\004 \002(\010\"\277\006\n\004I"
      "nst\022\n\n\002pc\030\001 \002(\004\022\014\n\004inst\030\002 \001(\007\022\022\n\ninst_by"
      "tes\030\t \001(\014\022\016\n\006nodeid\030\003 \001(\r\022\r\n\005cpuid\030\004 \001(\r"
      "\022\014\n\004tick\030\005 \001(\006\022)\n\004type\030\006 \001(\0162\033.ProtoMess"
      "age.Inst.InstType\022\022\n\ninst_flags\030\007 \001(\r\0220\n"
      "\nmem_access\030\010 \003(\0132\034.ProtoMessage.Inst.Me"
      "mAccess\032:\n\tMemAccess\022\014\n\004addr\030\001 \002(\004\022\014\n\004si"
      "ze\030\002 \002(\r\022\021\n\tmem_flags\030\003 \001(\r\"\256\004\n\010InstType"
      "\022\010\n\004None\020\000\022\n\n\006IntAlu\020\001\022\n\n\006IntMul\020\002\022\n\n\006In"
      "tDiv\020\003\022\014\n\010FloatAdd\020\004\022\014\n\010FloatCmp\020\005\022\014\n\010Fl"
      "oatCvt\020\006\022\r\n\tFloatMult\020\007\022\014\n\010FloatDiv\020\010\022\r\n"
      "\tFloatSqrt\020\t\022\016\n\nSIMDIntAdd\020\n\022\021\n\rSIMDIntA"
      "ddAcc\020\013\022\016\n\nSIMDIntAlu\020\014\022\016\n\nSIMDIntCmp\020\r\022"
      "\016\n\nSIMDIntCvt\020\016\022\014\n\010SIMDMisc\020\017\022\017\n\013SIMDInt"
      "Mult\020\020\022\022\n\016SIMDIntMultAcc\020\021\022\020\n\014SIMDIntShi"
      "ft\020\022\022\023\n\017SIMDIntShiftAcc\020\023\022\014\n\010SIMDSqrt\020\024\022"
      "\020\n\014SIMDFloatAdd\020\025\022\020\n\014SIMDFloatAlu\020\026\022\020\n\014S"
      "IMDFloatCmp\020\027\022\020\n\014SIMDFloatCvt\020\030\022\020\n\014SIMDF"
      "loatDiv\020\031\022\021\n\rSIMDFloatMisc\020\032\022\021\n\rSIMDFloa"
      "tMult\020\033\022\024\n\020SIMDFloatMultAdd\020\034\022\021\n\rSIMDFlo"
      "atSqrt\020\035\022\013\n\007MemRead\020\036\022\014\n\010MemWrite\020\037\022\r\n\tI"
      "prAccess\020 \022\020\n\014InstPrefetch\020!"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 948);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/inst.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2finst_2eproto
namespace ProtoMessage {
const ::google::protobuf::EnumDescriptor* Inst_InstType_descriptor() {
  protobuf_proto_2finst_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2finst_2eproto::file_level_enum_descriptors[0];
}
bool Inst_InstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Inst_InstType Inst::None;
const Inst_InstType Inst::IntAlu;
const Inst_InstType Inst::IntMul;
const Inst_InstType Inst::IntDiv;
const Inst_InstType Inst::FloatAdd;
const Inst_InstType Inst::FloatCmp;
const Inst_InstType Inst::FloatCvt;
const Inst_InstType Inst::FloatMult;
const Inst_InstType Inst::FloatDiv;
const Inst_InstType Inst::FloatSqrt;
const Inst_InstType Inst::SIMDIntAdd;
const Inst_InstType Inst::SIMDIntAddAcc;
const Inst_InstType Inst::SIMDIntAlu;
const Inst_InstType Inst::SIMDIntCmp;
const Inst_InstType Inst::SIMDIntCvt;
const Inst_InstType Inst::SIMDMisc;
const Inst_InstType Inst::SIMDIntMult;
const Inst_InstType Inst::SIMDIntMultAcc;
const Inst_InstType Inst::SIMDIntShift;
const Inst_InstType Inst::SIMDIntShiftAcc;
const Inst_InstType Inst::SIMDSqrt;
const Inst_InstType Inst::SIMDFloatAdd;
const Inst_InstType Inst::SIMDFloatAlu;
const Inst_InstType Inst::SIMDFloatCmp;
const Inst_InstType Inst::SIMDFloatCvt;
const Inst_InstType Inst::SIMDFloatDiv;
const Inst_InstType Inst::SIMDFloatMisc;
const Inst_InstType Inst::SIMDFloatMult;
const Inst_InstType Inst::SIMDFloatMultAdd;
const Inst_InstType Inst::SIMDFloatSqrt;
const Inst_InstType Inst::MemRead;
const Inst_InstType Inst::MemWrite;
const Inst_InstType Inst::IprAccess;
const Inst_InstType Inst::InstPrefetch;
const Inst_InstType Inst::InstType_MIN;
const Inst_InstType Inst::InstType_MAX;
const int Inst::InstType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void InstHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstHeader::kObjIdFieldNumber;
const int InstHeader::kVerFieldNumber;
const int InstHeader::kTickFreqFieldNumber;
const int InstHeader::kHasMemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstHeader::InstHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2finst_2eproto::scc_info_InstHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.InstHeader)
}
InstHeader::InstHeader(const InstHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_obj_id()) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  ::memcpy(&tick_freq_, &from.tick_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_mem_) -
    reinterpret_cast<char*>(&tick_freq_)) + sizeof(has_mem_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.InstHeader)
}

void InstHeader::SharedCtor() {
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_mem_) -
      reinterpret_cast<char*>(&tick_freq_)) + sizeof(has_mem_));
}

InstHeader::~InstHeader() {
  // @@protoc_insertion_point(destructor:ProtoMessage.InstHeader)
  SharedDtor();
}

void InstHeader::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InstHeader::descriptor() {
  ::protobuf_proto_2finst_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2finst_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstHeader& InstHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2finst_2eproto::scc_info_InstHeader.base);
  return *internal_default_instance();
}


void InstHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.InstHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obj_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&tick_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_mem_) -
        reinterpret_cast<char*>(&tick_freq_)) + sizeof(has_mem_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InstHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.InstHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj_id().data(), static_cast<int>(this->obj_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProtoMessage.InstHeader.obj_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ver = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 tick_freq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tick_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool has_mem = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_has_mem();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.InstHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.InstHeader)
  return false;
#undef DO_
}

void InstHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.InstHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_id().data(), static_cast<int>(this->obj_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProtoMessage.InstHeader.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj_id(), output);
  }

  // required uint32 ver = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // required uint64 tick_freq = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tick_freq(), output);
  }

  // required bool has_mem = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_mem(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.InstHeader)
}

::google::protobuf::uint8* InstHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.InstHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_id().data(), static_cast<int>(this->obj_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProtoMessage.InstHeader.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj_id(), target);
  }

  // required uint32 ver = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // required uint64 tick_freq = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tick_freq(), target);
  }

  // required bool has_mem = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_mem(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.InstHeader)
  return target;
}

size_t InstHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.InstHeader)
  size_t total_size = 0;

  if (has_obj_id()) {
    // required string obj_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  if (has_tick_freq()) {
    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick_freq());
  }

  if (has_ver()) {
    // required uint32 ver = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());
  }

  if (has_has_mem()) {
    // required bool has_mem = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InstHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.InstHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string obj_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());

    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick_freq());

    // required uint32 ver = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());

    // required bool has_mem = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.InstHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const InstHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.InstHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.InstHeader)
    MergeFrom(*source);
  }
}

void InstHeader::MergeFrom(const InstHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.InstHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_obj_id();
      obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      tick_freq_ = from.tick_freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_mem_ = from.has_mem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.InstHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstHeader::CopyFrom(const InstHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.InstHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void InstHeader::Swap(InstHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstHeader::InternalSwap(InstHeader* other) {
  using std::swap;
  obj_id_.Swap(&other->obj_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_freq_, other->tick_freq_);
  swap(ver_, other->ver_);
  swap(has_mem_, other->has_mem_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InstHeader::GetMetadata() const {
  protobuf_proto_2finst_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2finst_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Inst_MemAccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Inst_MemAccess::kAddrFieldNumber;
const int Inst_MemAccess::kSizeFieldNumber;
const int Inst_MemAccess::kMemFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Inst_MemAccess::Inst_MemAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2finst_2eproto::scc_info_Inst_MemAccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.Inst.MemAccess)
}
Inst_MemAccess::Inst_MemAccess(const Inst_MemAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_flags_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(mem_flags_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Inst.MemAccess)
}

void Inst_MemAccess::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_flags_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(mem_flags_));
}

Inst_MemAccess::~Inst_MemAccess() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst.MemAccess)
  SharedDtor();
}

void Inst_MemAccess::SharedDtor() {
}

void Inst_MemAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Inst_MemAccess::descriptor() {
  ::protobuf_proto_2finst_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2finst_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Inst_MemAccess& Inst_MemAccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2finst_2eproto::scc_info_Inst_MemAccess.base);
  return *internal_default_instance();
}


void Inst_MemAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst.MemAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mem_flags_) -
        reinterpret_cast<char*>(&addr_)) + sizeof(mem_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Inst_MemAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.Inst.MemAccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mem_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_mem_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.Inst.MemAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.Inst.MemAccess)
  return false;
#undef DO_
}

void Inst_MemAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.Inst.MemAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // optional uint32 mem_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mem_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.Inst.MemAccess)
}

::google::protobuf::uint8* Inst_MemAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst.MemAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // optional uint32 mem_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mem_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst.MemAccess)
  return target;
}

size_t Inst_MemAccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.Inst.MemAccess)
  size_t total_size = 0;

  if (has_addr()) {
    // required uint64 addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  return total_size;
}
size_t Inst_MemAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst.MemAccess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required uint32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 mem_flags = 3;
  if (has_mem_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mem_flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inst_MemAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.Inst.MemAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const Inst_MemAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Inst_MemAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.Inst.MemAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.Inst.MemAccess)
    MergeFrom(*source);
  }
}

void Inst_MemAccess::MergeFrom(const Inst_MemAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst.MemAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      mem_flags_ = from.mem_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Inst_MemAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.Inst.MemAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inst_MemAccess::CopyFrom(const Inst_MemAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst.MemAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst_MemAccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Inst_MemAccess::Swap(Inst_MemAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Inst_MemAccess::InternalSwap(Inst_MemAccess* other) {
  using std::swap;
  swap(addr_, other->addr_);
  swap(size_, other->size_);
  swap(mem_flags_, other->mem_flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Inst_MemAccess::GetMetadata() const {
  protobuf_proto_2finst_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2finst_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Inst::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Inst::kPcFieldNumber;
const int Inst::kInstFieldNumber;
const int Inst::kInstBytesFieldNumber;
const int Inst::kNodeidFieldNumber;
const int Inst::kCpuidFieldNumber;
const int Inst::kTickFieldNumber;
const int Inst::kTypeFieldNumber;
const int Inst::kInstFlagsFieldNumber;
const int Inst::kMemAccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Inst::Inst()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2finst_2eproto::scc_info_Inst.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.Inst)
}
Inst::Inst(const Inst& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      mem_access_(from.mem_access_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inst_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inst_bytes()) {
    inst_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inst_bytes_);
  }
  ::memcpy(&pc_, &from.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&inst_flags_) -
    reinterpret_cast<char*>(&pc_)) + sizeof(inst_flags_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Inst)
}

void Inst::SharedCtor() {
  inst_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inst_flags_) -
      reinterpret_cast<char*>(&pc_)) + sizeof(inst_flags_));
}

Inst::~Inst() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst)
  SharedDtor();
}

void Inst::SharedDtor() {
  inst_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Inst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Inst::descriptor() {
  ::protobuf_proto_2finst_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2finst_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Inst& Inst::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2finst_2eproto::scc_info_Inst.base);
  return *internal_default_instance();
}


void Inst::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mem_access_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    inst_bytes_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&pc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inst_flags_) -
        reinterpret_cast<char*>(&pc_)) + sizeof(inst_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Inst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.Inst)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 inst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_inst();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &inst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nodeid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nodeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cpuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 tick = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoMessage.Inst.InstType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoMessage::Inst_InstType_IsValid(value)) {
            set_type(static_cast< ::ProtoMessage::Inst_InstType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inst_flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_inst_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mem_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes inst_bytes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inst_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.Inst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.Inst)
  return false;
#undef DO_
}

void Inst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.Inst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 pc = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pc(), output);
  }

  // optional fixed32 inst = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->inst(), output);
  }

  // optional uint32 nodeid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nodeid(), output);
  }

  // optional uint32 cpuid = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpuid(), output);
  }

  // optional fixed64 tick = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->tick(), output);
  }

  // optional .ProtoMessage.Inst.InstType type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional uint32 inst_flags = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->inst_flags(), output);
  }

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mem_access_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->mem_access(static_cast<int>(i)),
      output);
  }

  // optional bytes inst_bytes = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->inst_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.Inst)
}

::google::protobuf::uint8* Inst::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 pc = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pc(), target);
  }

  // optional fixed32 inst = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->inst(), target);
  }

  // optional uint32 nodeid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nodeid(), target);
  }

  // optional uint32 cpuid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpuid(), target);
  }

  // optional fixed64 tick = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->tick(), target);
  }

  // optional .ProtoMessage.Inst.InstType type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional uint32 inst_flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->inst_flags(), target);
  }

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mem_access_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->mem_access(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes inst_bytes = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->inst_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst)
  return target;
}

size_t Inst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 pc = 1;
  if (has_pc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pc());
  }
  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->mem_access_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mem_access(static_cast<int>(i)));
    }
  }

  // optional bytes inst_bytes = 9;
  if (has_inst_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->inst_bytes());
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional fixed32 inst = 2;
    if (has_inst()) {
      total_size += 1 + 4;
    }

    // optional uint32 nodeid = 3;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodeid());
    }

    // optional fixed64 tick = 5;
    if (has_tick()) {
      total_size += 1 + 8;
    }

    // optional uint32 cpuid = 4;
    if (has_cpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpuid());
    }

    // optional .ProtoMessage.Inst.InstType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 inst_flags = 7;
    if (has_inst_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inst::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.Inst)
  GOOGLE_DCHECK_NE(&from, this);
  const Inst* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Inst>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.Inst)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.Inst)
    MergeFrom(*source);
  }
}

void Inst::MergeFrom(const Inst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mem_access_.MergeFrom(from.mem_access_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_inst_bytes();
      inst_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inst_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      pc_ = from.pc_;
    }
    if (cached_has_bits & 0x00000004u) {
      inst_ = from.inst_;
    }
    if (cached_has_bits & 0x00000008u) {
      nodeid_ = from.nodeid_;
    }
    if (cached_has_bits & 0x00000010u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000020u) {
      cpuid_ = from.cpuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      inst_flags_ = from.inst_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Inst::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.Inst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inst::CopyFrom(const Inst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mem_access())) return false;
  return true;
}

void Inst::Swap(Inst* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Inst::InternalSwap(Inst* other) {
  using std::swap;
  CastToBase(&mem_access_)->InternalSwap(CastToBase(&other->mem_access_));
  inst_bytes_.Swap(&other->inst_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pc_, other->pc_);
  swap(inst_, other->inst_);
  swap(nodeid_, other->nodeid_);
  swap(tick_, other->tick_);
  swap(cpuid_, other->cpuid_);
  swap(type_, other->type_);
  swap(inst_flags_, other->inst_flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Inst::GetMetadata() const {
  protobuf_proto_2finst_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2finst_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtoMessage::InstHeader* Arena::CreateMaybeMessage< ::ProtoMessage::InstHeader >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoMessage::InstHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtoMessage::Inst_MemAccess* Arena::CreateMaybeMessage< ::ProtoMessage::Inst_MemAccess >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoMessage::Inst_MemAccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtoMessage::Inst* Arena::CreateMaybeMessage< ::ProtoMessage::Inst >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoMessage::Inst >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
