name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CI_WORKLOADS: /nfs/home/share/ci-workloads
  TMP_READY_TO_RUN: /nfs/home/share/ci-workloads/tmp_ready_to_run
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  compilation-all:
    runs-on: nemu
    continue-on-error: false
    name: Compilation - all configs
    timeout-minutes: 60
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup env
      run: |
        echo "NEMU_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
    - name: Try to compile 
      id: list_configs
      run: |
        bash ./scripts/compilation-test.sh

  download_spike_so:
    runs-on: nemu
    outputs:
      spike-so: ${{ steps.save-spike-so.outputs.SPIKE_SO }}
      nutshell-spike-so: ${{ steps.save-nutshell-spike-so.outputs.NUTSHELL_SPIKE_SO }}
    steps:
    - name: Install jq
      run: |
          proxychains curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x ./jq
          ./jq --version

    # Step 1: 获取目标仓库最新运行的 workflow ID
    - name: Get latest workflow run ID
      id: get_workflow_run
      run: |
        REPO="OpenXiangShan/riscv-isa-sim"
        WORKFLOW_NAME="build-difftest-so.yml"
        RUNS_API="https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_NAME/runs"

        echo "Fetching latest workflow run ID from $RUNS_API..."
        WORKFLOW_RUN_ID=$(curl -s $RUNS_API \
          | ./jq -r '.workflow_runs[0].id')

        if [ "$WORKFLOW_RUN_ID" == "null" ]; then
          echo "Error: No workflow runs found for $WORKFLOW_NAME in $REPO"
          exit 1
        fi

        echo "Latest workflow run ID: $WORKFLOW_RUN_ID"
        echo "WORKFLOW_RUN_ID=$WORKFLOW_RUN_ID" >> $GITHUB_ENV
        echo "REPO=$REPO" >> $GITHUB_ENV

    # Step 2: 列出可用的工件
    - name: List artifacts
      id: list_artifacts
      run: |
        ARTIFACTS_API="https://api.github.com/repos/$REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts"

        echo "Fetching artifact list from $ARTIFACTS_API..."
        curl -s $ARTIFACTS_API > artifacts.json

        echo "Artifacts list saved to artifacts.json"
        cat artifacts.json

    # Step 3: 下载特定工件
    - name: Download artifact
      run: |
        ARTIFACTS_API="https://api.github.com/repos/$REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts"

        XIANGSHAN_ARTIFACT_NAME="riscv64-xiangshan-spike-so-ubuntu-20.04-clang"
        NUTSHELL_ARTIFACT_NAME="riscv64-nutshell-spike-so-ubuntu-20.04-clang"

        XIANGSHAN_ARTIFACT_URL=$(./jq -r ".artifacts[] | select(.name==\"$XIANGSHAN_ARTIFACT_NAME\") | .archive_download_url" artifacts.json)
        NUTSHELL_ARTIFACT_URL=$(./jq -r ".artifacts[] | select(.name==\"$NUTSHELL_ARTIFACT_NAME\") | .archive_download_url" artifacts.json)

        if [ -z "$XIANGSHAN_ARTIFACT_URL" ]; then
          echo "Error: Artifact $XIANGSHAN_ARTIFACT_NAME not found"
          exit 1
        fi

        if [ -z "$NUTSHELL_ARTIFACT_URL" ]; then
          echo "Error: Artifact $NUTSHELL_ARTIFACT_NAME not found"
          exit 1
        fi

        echo "Downloading artifact from $XIANGSHAN_ARTIFACT_URL..."
        curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          $XIANGSHAN_ARTIFACT_URL --output $XIANGSHAN_ARTIFACT_NAME

        echo "Downloading artifact from $NUTSHELL_ARTIFACT_URL..."
        curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          $NUTSHELL_ARTIFACT_URL --output $NUTSHELL_ARTIFACT_NAME

        echo "Artifact $GITHUB_WORKSPACE/$XIANGSHAN_ARTIFACT_NAME downloaded successfully"
        echo "Artifact $GITHUB_WORKSPACE/$NUTSHELL_ARTIFACT_NAME downloaded successfully"
        ls -l $GITHUB_WORKSPACE/$XIANGSHAN_ARTIFACT_NAME
        ls -l $GITHUB_WORKSPACE/$NUTSHELL_ARTIFACT_NAME
        echo "XIANGSHAN_ARTIFACT_NAME=$XIANGSHAN_ARTIFACT_NAME" >> $GITHUB_ENV
        echo "NUTSHELL_ARTIFACT_NAME=$NUTSHELL_ARTIFACT_NAME" >> $GITHUB_ENV

    # Step 4: 解压工件
    - name: Extract artifact
      run: |
        TIMESTAMP=$(date +"%Y%m%d%H%M%S")
        mkdir -p $TMP_READY_TO_RUN

        unzip $GITHUB_WORKSPACE/$XIANGSHAN_ARTIFACT_NAME -d $TMP_READY_TO_RUN/riscv64-spike-so-$TIMESTAMP
        unzip $GITHUB_WORKSPACE/$NUTSHELL_ARTIFACT_NAME -d $TMP_READY_TO_RUN/riscv64-nutshell-spike-so-$TIMESTAMP

        echo "SPIKE_SO=$TMP_READY_TO_RUN/riscv64-spike-so-$TIMESTAMP/riscv64-spike-so" >> "$GITHUB_ENV"
        echo "NUTSHELL_SPIKE_SO=$TMP_READY_TO_RUN/riscv64-nutshell-spike-so-$TIMESTAMP/riscv64-spike-so" >> "$GITHUB_ENV"

    - name: Save Output
      id: save-spike-so
      run: |
        echo "Extracted artifact contents: $SPIKE_SO"
        ls -l $SPIKE_SO
        echo "SPIKE_SO=$SPIKE_SO" >> "$GITHUB_OUTPUT"

    - name: Save Output
      id: save-nutshell-spike-so
      run: |
        echo "Extracted artifact contents: $NUTSHELL_SPIKE_SO"
        ls -l $NUTSHELL_SPIKE_SO
        echo "NUTSHELL_SPIKE_SO=$NUTSHELL_SPIKE_SO" >> "$GITHUB_OUTPUT"

  basic-xiangshan:
    runs-on: nemu
    continue-on-error: false
    timeout-minutes: 10
    needs: download_spike_so
    name: Basic - XiangShan
    steps:
      - uses: actions/checkout@v4
      - name: Setup env
        run: |
          echo "NEMU_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "V_WORKLOAD_HOME=/nfs/home/share/ci-workloads/V-extension-tests" >> $GITHUB_ENV
          echo "SPIKE_SO=${{ needs.download_spike_so.outputs.spike-so }}" >> $GITHUB_ENV
          echo "NUTSHELL_SPIKE_SO=${{ needs.download_spike_so.outputs.nutshell-spike-so }}" >> $GITHUB_ENV

      - name: Build NEMU interpreter for XS
        run: |
          make riscv64-xs_defconfig
          make -j
      - name: System - linux-hello-opensbi
        run: |
          ./build/riscv64-nemu-interpreter -b ${CI_WORKLOADS}/linux-hello-opensbi/fw_payload.bin
      - name: System - Xvisor
        run: |
          ./build/riscv64-nemu-interpreter -b ${CI_WORKLOADS}/H-extension-tests/xvisor-linux-minimal/payload.bin
      - name: System - KVM
        run: |
          ./build/riscv64-nemu-interpreter -b ${CI_WORKLOADS}/H-extension-tests/kvm
      - name: test cpt taking and restoring using zstd format
        run: |
          make clean-all
          make riscv64-xs-cpt_defconfig
          make -j
          make -C resource/gcpt_restore
          # take cpt, and put cpt in output_top/test/linux
          bash ./scripts/take_zstd.sh
          make clean-all

          # restore cpt
          git submodule update --init --depth=1 ready-to-run
          make riscv64-xs-diff-spike_defconfig
          make -j
          bash ./scripts/restore_zstd.sh
          make clean-all

  basic-nutshell:
    runs-on: nemu
    continue-on-error: false
    timeout-minutes: 10
    needs: download_spike_so
    name: Basic - NutShell
    steps:
      - uses: actions/checkout@v4
      - name: Setup env
        run: |
          echo "NEMU_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "SPIKE_SO=${{ needs.download_spike_so.outputs.spike-so }}" >> $GITHUB_ENV
          echo "NUTSHELL_SPIKE_SO=${{ needs.download_spike_so.outputs.nutshell-spike-so }}" >> $GITHUB_ENV

      - name: Build NEMU interpreter
        run: |
          make riscv64-nutshell_defconfig
          make -j
      - name: test boot linux
        run: |
          ./build/riscv64-nemu-interpreter -b ${CI_WORKLOADS}/linux-hello/bbl.bin
      - name: Build NEMU interpreter for diff with spike
        run: |
          make clean-all
          make riscv64-nutshell-diff-spike_defconfig
          make -j
      - name: test boot linux with difftest
        run: |
          ./build/riscv64-nemu-interpreter -b --diff ${CI_WORKLOADS}/nutshell/riscv64-spike-so ${CI_WORKLOADS}/linux-hello/bbl.bin

  diff-spike-guard:
    # NEMU should report error if RVV agnostic is enabled when comparing against Spike ref; It should crash in the expected way
    runs-on: nemu
    continue-on-error: false
    needs: download_spike_so
    name: Diff with Spike - Guard
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Setup env
        run: |
          echo "NEMU_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "TEST_HOME=/nfs/home/share/ci-workloads/V-extension-tests" >> $GITHUB_ENV
          echo "SPIKE_SO=${{ needs.download_spike_so.outputs.spike-so }}" >> $GITHUB_ENV
          echo "NUTSHELL_SPIKE_SO=${{ needs.download_spike_so.outputs.nutshell-spike-so }}" >> $GITHUB_ENV

      - name: Build NEMU with V extension and agnostic
        run: |
          git submodule update --init --depth=1 ready-to-run
          make clean-all
          make riscv64-xs-diff-spike-agnostic_defconfig
          make -j
          set -x
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/hmmer_retro_6200_0.0378585.gz -r $TEST_HOME/v-gcpt.bin -I 2000000 > crash.log  || exit_code=$?
          if [ ${exit_code} -eq 0 ]; then echo "Difftest is broken, it should report error!" exit 1; fi
          match=$(grep "wrong.*=.*ffff" crash.log -c)
          if [ ${match} -eq 0 ]; then echo "Difftest is broken, it should report at least one agnostic related difference!" exit 1; fi
          make clean-all
          set +x

  diff-spike-basic:
    runs-on: nemu
    continue-on-error: false
    needs: download_spike_so
    name: Diff with Spike - Basic & System
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Setup env
        run: |
          echo "NEMU_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "SPIKE_SO=${{ needs.download_spike_so.outputs.spike-so }}" >> $GITHUB_ENV
          echo "NUTSHELL_SPIKE_SO=${{ needs.download_spike_so.outputs.nutshell-spike-so }}" >> $GITHUB_ENV

      - name: Build NEMU interpreter for diff with spike
        run: |
          git submodule update --init --depth=1 ready-to-run
          make riscv64-xs-diff-spike_defconfig
          make -j

      - name: Basic - cputest
        env: 
          dir_tests: ${{ env.CI_WORKLOADS }}/nexus-am/tests/cputest/build/
        run: |
          find ${{ env.dir_tests }} -type f -name "*.bin" | while read -r test_bin; do
            echo ::group::$(basename $test_bin)
            ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} ${test_bin}
            echo "::endgroup::"
          done

      - name: Basic - riscv-tests
        # failed at rv64mi-p-sd-misaligned.bin 
        env: 
          dir_tests: ${{ env.CI_WORKLOADS }}/riscv-tests/isa/build/
          skip_tests: |
            rv64mi-p-ld-hd-misaligned.bin
            rv64mi-p-ld-misaligned.bin
            rv64mi-p-lh-hd-misaligned.bin
            rv64mi-p-lh-misaligned.bin
            rv64mi-p-lw-hd-misaligned.bin
            rv64mi-p-lw-misaligned.bin
            rv64mi-p-sd-hd-misaligned.bin
            rv64mi-p-sd-misaligned.bin
            rv64mi-p-sh-hd-misaligned.bin
            rv64mi-p-sh-misaligned.bin
            rv64mi-p-sw-hd-misaligned.bin
            rv64mi-p-sw-misaligned.bin
        run: |
          readarray -t skip_tests_array <<< "$skip_tests"
          find ${{ env.dir_tests }} -type f -name "*.bin" | while read -r test_bin; do
            if [[ " ${skip_tests_array[@]} " =~ " $(basename $test_bin) " ]]; then
              echo "$test_bin skiped."
              continue;
            fi
            echo ::group::$(basename $test_bin)
            ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} ${test_bin}
            echo "::endgroup::"
          done

      - name: Basic - rvv-test
        env: 
          dir_tests: ${{ env.CI_WORKLOADS }}/V-extension-tests/rvv-test/
        run: |
          find ${{ env.dir_tests }} -type f -name "*.bin" | while read -r test_bin; do
            echo ::group::$(basename $test_bin)
            ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} ${test_bin}
            echo "::endgroup::"
          done

      - name: Basic - misc-tests
        # if: false
        env:
          tests: |
            bitmanip/bitMisc.bin
            coremark_rv64gc_o2/coremark-riscv64-xs.bin
            coremark_rv64gc_o3/coremark-riscv64-xs.bin
            coremark_rv64gcb_o3/coremark-riscv64-xs.bin
            ext_intr/amtest-riscv64-xs.bin
            cache-alias/aliastest-riscv64-xs.bin
            Svinval/rv64mi-p-svinval.bin
            pmp/pmp.riscv.bin
            pmp/pmp-am/amtest-riscv64-xs.bin
            pmp/hugepage-pmp-atom/amtest-riscv64-xs.bin
            asid/asid.bin
            isa_misc/xret_clear_mprv.bin
            isa_misc/satp_ppn.bin
            cache-management/softprefetchtest-riscv64-xs.bin
            H-extension-tests/riscv-hyp-tests/rvh_test.bin
            zacas/zacas-riscv64-xs.bin
          skip_tests: |
            ext_intr/amtest-riscv64-xs.bin
            Svinval/rv64mi-p-svinval.bin
            pmp/pmp.riscv.bin
            pmp/pmp-am/amtest-riscv64-xs.bin
            pmp/hugepage-pmp-atom/amtest-riscv64-xs.bin
            isa_misc/satp_ppn.bin
            H-extension-tests/riscv-hyp-tests/rvh_test.bin
        run: |
          readarray -t skip_tests_array <<< "$skip_tests"
          for test_bin in $tests; do
            if [[ " ${skip_tests_array[@]} " =~ " ${test_bin} " ]]; then
              echo "$test_bin skiped."
              continue;
            fi
            echo ::group::$test_bin
            ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} ${CI_WORKLOADS}/${test_bin}
            echo "::endgroup::"
          done

      - name: System - linux
        run: |
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} ${CI_WORKLOADS}/linux-hello-opensbi/fw_payload.bin

      - name: System - Xvisor
        run: |
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} ${CI_WORKLOADS}/H-extension-tests/xvisor-linux-minimal/payload.bin

      # - name: System - KVM 
      #   run: |
      #     ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} ${CI_WORKLOADS}/H-extension-tests/kvm
  
  diff-spike-checkpoint:
    runs-on: nemu
    continue-on-error: false
    needs: download_spike_so
    name: Diff with Spike - Checkpoints
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Setup env
        run: |
          echo "NEMU_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "TEST_HOME=/nfs/home/share/ci-workloads/V-extension-tests" >> $GITHUB_ENV
          echo "SPIKE_SO=${{ needs.download_spike_so.outputs.spike-so }}" >> $GITHUB_ENV
          echo "NUTSHELL_SPIKE_SO=${{ needs.download_spike_so.outputs.nutshell-spike-so }}" >> $GITHUB_ENV

      - name: Build NEMU interpreter for diff with spike
        run: |
          git submodule update --init --depth=1 ready-to-run
          make riscv64-xs-diff-spike_defconfig
          make -j

      - name: Run Vector-spec06-checkpoint with Spike DiffTest
        run: |
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/hmmer_nph3_1886_0.000268086.gz -r $TEST_HOME/v-gcpt.bin -I 40000000
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/hmmer_retro_6200_0.0378585.gz -r $TEST_HOME/v-gcpt.bin -I 40000000
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/h264ref_sss_88321_0.0346343.gz -r $TEST_HOME/v-gcpt.bin -I 40000000
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/h264ref_foreman.baseline_8028_0.0414445.gz -r $TEST_HOME/v-gcpt.bin -I 40000000
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/h264ref_foreman.main_3027_0.0443573.gz -r $TEST_HOME/v-gcpt.bin -I 40000000
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/libquantum_41028_0.0840681.gz -r $TEST_HOME/v-gcpt.bin -I 40000000
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/bzip2_402_0.00785398.gz -r $TEST_HOME/v-gcpt.bin -I 40000000

      - name: Run OpenSBI+Linux+Vectorized_h264 with Spike DiffTest
        run: |
          ./build/riscv64-nemu-interpreter -b --diff ${SPIKE_SO} $TEST_HOME/opensbi_rvv_h264ref_sss -I 200000000

  compile-difftest-so:
    runs-on: ubuntu-latest
    continue-on-error: false
    name: Compile difftest-so
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: compile in CentOS 7 docker
      run: |
        bash ./scripts/generate_so_from_docker.sh
    - name: archive difftest-so artifacts
      uses: actions/upload-artifact@v4
      with:
        name: difftest-so
        path: |
          artifact

  clean-spike-so:
    runs-on: ubuntu-latest
    needs:
       - compile-difftest-so
       - diff-spike-checkpoint
       - diff-spike-basic
       - diff-spike-guard
       - basic-nutshell
       - basic-xiangshan
       - download_spike_so
       - compilation-all
    name: Clean up
    if: always()
    steps:
    - name: Setup env
      run: |
        echo "SPIKE_SO=${{ needs.download_spike_so.outputs.spike-so }}" >> $GITHUB_ENV
        echo "NUTSHELL_SPIKE_SO=${{ needs.download_spike_so.outputs.nutshell-spike-so }}" >> $GITHUB_ENV
    - name: Clean up
      run: |
        echo $(dirname $SPIKE_SO)
        echo $(dirname $NUTSHELL_SPIKE_SO)
        rm -rf $(dirname $SPIKE_SO)
        rm -rf $(dirname $NUTSHELL_SPIKE_SO)
